from loader import dp
from aiogram import types, dispatcher
from utils.util import city_info, set_history, str_info
from database.data import user_exist, user_info
from keyboards import inline, reply
from states.state import LowSelect


@dp.message_handler(text='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', state='*')
@dp.message_handler(commands='low', state='*')
async def low_command(message: types.Message, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Ç—ë–º –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /low
    –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :param message: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å Message
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not user_exist(message.from_id):
        await message.reply('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üò±\n'
                            '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /reg')
        return

    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=inline.keyboard1())
    await state.set_state(LowSelect.category_selection.state)


@dp.callback_query_handler(dispatcher.filters.Text(endswith='_kb1'), state=LowSelect.category_selection.state)
async def selection_category(call: types.CallbackQuery, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π inline.keyboard1()
    –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è category_selection
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ

    :param call: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å CallbackQuery
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.update_data(category=call.data[:-4])
    await call.message.edit_text('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ, —ç—Ç–æ –±—É–¥–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                 '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ:')
    await state.set_state(LowSelect.quantity_selection.state)


@dp.message_handler(state=LowSelect.quantity_selection.state)
async def selection_quantity(message: types.Message, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è quantity_selection
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏
    –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫ –∂–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏

    :param message: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å Message
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        message.text = int(message.text)
    except ValueError:
        await message.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ')
        return

    data = user_info(message.from_id)
    country = data[0]
    city = data[1]
    res = city_info(country, city)['prices']
    user_data = await state.get_data()
    await state.finish()

    elements = [i_elem for i_elem in res if i_elem['category_name'] == user_data['category']]

    elements = sorted(elements, key=lambda x: x['min'])
    if len(elements) < message.text:
        await message.answer(f'–¢–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–Ω–æ - {len(elements)}')
        for i_elem in elements:
            await message.answer(str_info(i_elem))

        history = f"{country} {city} low {user_data['category'].replace(' ', '')} {len(elements)}"
        set_history(message.from_id, history)

        await message.answer(text='–ú–µ–Ω—é:', reply_markup=reply.keyboard1())
        return

    for i_num in range(int(message.text)):
        i_elem = elements[i_num]
        await message.answer(str_info(i_elem))

    history = f"{country} {city} low {user_data['category'].replace(' ', '')} {message.text}"
    set_history(message.from_id, history)
    await message.answer(text='–ú–µ–Ω—é:', reply_markup=reply.keyboard1())
