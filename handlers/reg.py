from states.state import SelectLocation
from aiogram import types, dispatcher
from database.data import user_exist, update_user_info, new_user
from utils.util import place_list
from loader import dp
from handlers.my_location import my_location_command


@dp.message_handler(text='–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', state='*')
@dp.message_handler(commands='reg', state='*')
async def registration_command(message: types.Message, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Ç—ë–º –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /reg
    –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    :param message: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å Message
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–µ–π—á–∞—Å '
                        '–Ω–∞—Ö–æ–¥–∏—à—å—Å—è,—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:')
    await state.set_state(SelectLocation.choosing_country_name.state)


@dp.message_handler(state=SelectLocation.choosing_country_name.state)
async def process_choosing_country(message: types.Message, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è choosing_country_name
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –°—Ç—Ä–∞–Ω—ã, –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –°—Ç—Ä–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö API –Ω–∞ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ

    :param message: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å Message
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text not in [i_elem['country_name'] for i_elem in place_list()]:
        await message.reply('–û—à–∏–±–∫–∞, –≤ –º–æ–∏—Ö –∑–∞–ø–∏—Å—è—Ö –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ')
        return

    await state.update_data(country_name=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å '
                         '–Ω–∞—Ö–æ–¥–∏—à—å—Å—è, —Ç–∞–∫ –∂–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:')
    await state.set_state(SelectLocation.choosing_city_name.state)


@dp.message_handler(state=SelectLocation.choosing_city_name.state)
async def process_choosing_city(message: types.Message, state: dispatcher.FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è choosing_city_name
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö API, –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    :param message: –ø—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∫–ª–∞—Å—Å Message
    :param state: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_data = await state.get_data()
    list_place = [i_elem['city_name'] for i_elem in place_list() if i_elem['country_name'] == user_data['country_name']]
    if message.text not in list_place:
        await message.reply('–ò–∑–≤–∏–Ω–∏, –Ω–æ –≤ –º–æ–∏—Ö –∑–∞–ø–∏—Å—è—Ö –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ')
        return

    await state.update_data(city_name=message.text)
    user_data = await state.get_data()
    await state.finish()

    if user_exist(message.from_id):
        update_user_info(message.from_id, user_data['country_name'], user_data['city_name'])
    else:
        new_user(message.from_id, user_data['country_name'], user_data['city_name'])

    await message.answer('–û—Ç–ª–∏—á–Ω–æ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    await my_location_command(message=message)
